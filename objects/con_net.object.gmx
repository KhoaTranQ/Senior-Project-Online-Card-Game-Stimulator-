<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();

enum sig {
    addCard = 100,
    pos = 101,
    cardState = 102,
    addDeck = 103,
    deckState = 104,
    addSprite = 105,
    deckDraw = 106,
    deckDrop = 107,
    import = 108,
    confirmImport = 109,
    flip = 110,
    rotate = 111,
    shuffle = 112,
    delete = 113,
    cardToDeck = 114,
    rng = 115,
    handInsert = 116,
    handRemove = 117,
    finishImport = 118,
    depthCmd = 119,
    place = 120,
    deckRemove = 121,
    deckInsert = 122,
    viewOpen = 123,
    viewClose = 124,
    
    viewRequest = 125,
    viewResponse = 126,
    deckPos = 201,
    cardPos = 202
}

async_object = noone;

global.net_object = id;
global.multiplayer = false

network_set_config(network_config_connect_timeout, 5000);

syncMap = ds_map_create();
hand_size = 0;
hand_text = "";

/*
If [CLIENT] The socket to use for connections
If [SERVER] The socket from the client.
*/
socket = noone;
connection = noone;
server = noone;
buffer = buffer_create(1, buffer_grow, 1);
isServer = false;

perm_id = -1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Networking

var type_event = async_load[? "type"];

switch type_event {
    case network_type_connect:
        // Add the client to the socket variable
        socket = async_load[? "socket"];
        room_goto(rm_main);
        break;
        
    case network_type_non_blocking_connect:
        debug("NON-BLOCKING connect event fired!");
        socket = async_load[? "socket"];
        room_goto(rm_main);
        break;
        
    case network_type_disconnect:
        // Remove the client from the socket variable
        show_message_async("Player disconnected");
        socket = noone;
        break;
        
    case network_type_data:
        // received data...
        var data = async_load[? "buffer"];
        
        buffer_seek(data, buffer_seek_start, 0);
        type_event = buffer_read(data, buffer_u8);
        show_debug_message("signature recieved is: " + string(type_event) );
        
        switch type_event {
            // partner is trying to sync a new card
            case sig.addCard:
                net_create_card(data);
                break;
                
            // Parnter has moved a card
            case sig.pos:
                //net_update_cardPos(data);
                net_update_pos(data);
                break;
                
            // Parnter added a sprite to his game.
            case sig.addSprite:
                //debug("Got sprite packet");
                net_add_sprite(data);               
                break;
            
            // partner is trying to sync a new deck
            case sig.addDeck:
                net_create_deck(data);
                break;
                
            // partner has drawn from his deck
            case sig.deckDraw:
                net_deck_draw(data)
                break;
                
            // partner has dropped a card on a deck.
            case sig.deckDrop:
                net_deck_drop(data);
                break;
                
            // partner has imported a new deck.
            case sig.import:
                net_import(data);
                break;
                
            // partner has confirmed the reception of the deck.
            case sig.confirmImport:
                net_confirm_import(data);
                break;
                
            // partnet has flipped something
            case sig.flip:
                net_flip(data);
                break;
                
            // partner has flipped something
            case sig.rotate:
                net_rotate(data);
                break;
                
            // partner has shuffled a deck.
            case sig.shuffle:
                net_shuffle(data);
                break;
                
            // partner has deleted something.
            case sig.delete:
                net_delete(data);
                break;
                
            // partnet has converted a card into a deck.
            case sig.cardToDeck:
                net_card_to_deck(data);
                break;
                
            case sig.rng:
                net_rng(data);
                break;
                
            case sig.handInsert:
                net_hand_insert(data);
                break;
                
            case sig.handRemove:
                net_hand_remove(data);
                break;
                
            case sig.finishImport:
                net_finish_import();
                break;
                
            case sig.depthCmd:
                net_depthCmd(data);
                break;
                
            case sig.place:
                net_place(data);
                break;
                
            case sig.deckRemove:
                net_deck_remove(data);
                break;
                
            case sig.deckInsert:
                net_deck_insert(data);
                break;
                
            case sig.viewOpen:
                net_view_open(data);
                break;
                
            case sig.viewClose:
                net_view_close(data);
                break;
                
            case sig.viewRequest:
                net_view_request(data);
                break;
                
                /* Controlled by async_view_request
            case sig.viewResponse:
                net_view_response(data);
                break;
                */
                
            // unknown event
            default:
                debug("Recieved something I don't know how to handle.");
                break;
                
            /*
            **Cases beyond this are defunct and only included for compatibility.
            */
            case sig.cardPos:
                net_update_cardPos(data);
                break;
                
            case sig.deckPos:
                net_update_deckPos(data);
                break;
                
        }
        break;
        
        
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
