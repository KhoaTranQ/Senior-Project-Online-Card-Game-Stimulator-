<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.log_object = id;

hand_text = ""

log = ds_list_create();
colapsed = true;
selected = false;

x = 25;
y = 25;
old_x = x;
old_y = y;


//  Formatting information
text_col = make_color_rgb(250,250,250);
margin = 3;
button = 25;
max_width = view_wport[0]/3;


x2 = 0;
y2 = 0;

title_height = 0;
box_height = 0;
widest = 0;
line_width = 0;
size = 0;
recent = ""
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.multiplayer)
{
    
    if(selected)
    {   //  Moving the log
        x = min( view_wport[0] - button, max(-((x2-x) - button), x + scr_norm_x(mouse_x) - old_x));
        y = min( (view_hport[0]+view_hport[1]) - button, max(-((y2-y) - button), y + scr_norm_y(mouse_y) - old_y));
    
    }
    
    with(global.net_object)
    {   //  Get the hand size from con_net... badly
        other.hand_text = "Cards in hand: " + string(hand_size);
    }
    
    counter_height = string_height(hand_text);
    box_height = 4*margin + counter_height;
    size = ds_list_size(log);
    
    if(colapsed)
    {
        recent = log[| size - 1];
        
        if( !is_undefined(recent))
        {
            box_height += string_height_ext(recent, -1, max_width);
        }
        
        x2 = x + 2*margin + max_width;
        y2 = y + box_height;
    }
    else
    {
        for(i = 0; i &lt; size; i++)
        {
            box_height += string_height_ext(log[| i], -1, max_width) + margin;
            
        }
        
        x2 = x + 2*margin + max_width;
        y2 = y + box_height;
    }
    
    old_x = scr_norm_x(mouse_x);
    old_y = scr_norm_y(mouse_y);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>selected = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// Draw the hand display, but only in multiplayer.
if(global.multiplayer)
{
    draw_set_font(-1);
    draw_set_valign(fa_top);
    draw_set_halign(fa_left);
    
    if(colapsed)
    {
        if( is_undefined(recent) )
        {
            draw_set_color(c_dkgray);
            draw_roundrect(x, y, x2, y2, false);
            draw_set_color(c_black);
            draw_roundrect(x, y, x2, y2, true);
            
            draw_set_color(text_col);
            draw_text(x + margin, y + margin, hand_text);
        
        }
        else
        {
            draw_set_color(c_dkgray);
            draw_roundrect(x, y, x2, y2, false);
            draw_set_color(c_black);
            draw_roundrect(x, y, x2, y2, true);
            
            draw_set_color(text_col);
            draw_text(x + margin, y + margin, hand_text);
            
            draw_line(x, y + 2*margin + counter_height, x2, y + 2*margin + counter_height);
            
            draw_text_ext(x+margin, y + 3*margin + counter_height, recent, -1, max_width);
        }
        
        draw_sprite_ext(spr_expand, 0, floor(x2 - button/2), floor(y + button/2),1, 1, 0, c_white, 1);
    }
    else
    {
        draw_set_color(c_dkgray);
        draw_roundrect(x, y, x2, y2, false);
        draw_set_color(c_black);
        draw_roundrect(x, y, x2, y2, true);
        
        draw_set_color(text_col);
        draw_text(x + margin, y + margin, hand_text);
        draw_line(x, y + 2*margin + counter_height, x2, y + 2*margin + counter_height);
        
        var line_height = y + margin + counter_height + margin + margin;
        
        for(i = 0; i &lt; size; i++)
        {
            draw_text_ext(x + margin, line_height, log[| i], -1, max_width);
            line_height = line_height + string_height_ext(log[| i], -1, max_width) + margin;
        }
        draw_sprite_ext(spr_expand, 1, floor(x2 - button/2), floor(y + button/2),1, 1, 0, c_white, 1);
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
