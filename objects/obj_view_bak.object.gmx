<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Construct object

/*
**  obj_view is "normalized", so it's size and position should not change
**  based on the view (zoom/pan/window size)
**  Card should stay the same size,
**  and the formatting---padding and margin--should not change either.
*/

// Certain other objects, such as con_resize, need to know how to access this object.
global.view = id;

// Trick GMS into sending us the deck and size instead of x and y coords.
deck = x;
size = y;

height_norm = view_hport[0] * 0.5;
width_norm = view_wport[0] * 0.5;

//Sizing and positioning
height = denorm_len_y(height_norm);
width = denorm_len_x(width_norm);

//The height of the navigation bars
nav_height_norm = 20;

x = scr_denorm_x(view_wport[0]/2) - width/2;
y = scr_denorm_y(view_hport[0]/2) - height/2;

// Used by con_resiser to keep the view static whenthe view changes
old_norm_x = 0;
old_norm_y = 0;

//formatting
margin_norm = 10;
padding_norm = 5;
margin = denorm_len_x(margin_norm);
padding = denorm_len_x(padding_norm);

//currently expects the first card in a deck to have the same dimensions as EVERY card EVER.
item_height_norm = global.scale * ds_map_find_value(deck.list[| 0], "height");
item_width_norm = global.scale * ds_map_find_value(deck.list[| 0], "width");
item_height = denorm_len_y(item_height_norm);
item_width = denorm_len_x(item_width_norm);

// Based on panel size and card dimentions, determine the number of rows and columns.
per_row = 0;
num_rows = 0;

// Tracker starts at 1 so it can always show at least one card, even if the box is really too small
var tracker = 1;
while( width - (2*margin) -  (tracker+1)*(item_width + padding) &gt; 0)
{
    tracker++;
}
per_row = tracker;


tracker = 1;
while(height - (2*margin) - (tracker+1)*(item_height + padding) &gt; 0)
{
    tracker++;
}
num_rows = tracker;

// The max number of cards a page can display
per_page = per_row * num_rows;

//The total number of pages
num_pages = ceil(size / per_page);

//The current page
curr_page = 0;

/*
debug("per_row: " + string(per_row)
+ " num_rows: " + string(num_rows)
+ " per_page: " + string(per_page)
);
*/
var card = noone;
for(i = curr_page * per_page; i &lt; min((curr_page+1) * per_page, size); i++)
{
    card = scr_card_from_map(deck.list[| i]);
    ds_list_add(global.viewCards, card);
}

view_add_component(0, "close", width_norm - 30, -15, 10, 25, "close", noone);

scr_update_depths();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.view = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Keeps the cards that are supposed to be in the hand, in the hand.
var size = ds_list_size(global.viewCards);
var avilspace;
var cardspace;
var paddspace;

for(i = 0; i &lt; size; i++)
{
    var card = global.viewCards[| i];
    
    margin = denorm_len_x(margin_norm);
    padding = denorm_len_x(padding_norm);
    
    item_height = denorm_len_y(item_height_norm);
    item_width = denorm_len_x(item_width_norm);
    
    card.image_yscale = item_height/sprite_get_height(card.sprite_index);
    card.image_xscale = (card.sprite_height * card.width/card.height)/sprite_get_width(card.sprite_index);
    
    row = i div per_row;
    column = i mod per_row;
    
    if(per_row == 1)
    {
        paddspace = 0;
    }
    else
    {
        avilspace = width - (2 * margin);
        cardspace = per_row * item_width;
        paddspace = (avilspace - cardspace) / (per_row - 1);
    }
    
    card.x = x + margin + item_width/2 + column*(item_width + paddspace);
    
    if(num_rows == 1)
    {
        paddspace = 0;
    }
    else
    {
        avilspace = height - (2 * margin);
        cardspace = num_rows * item_height;
        paddspace = (avilspace - cardspace) / (num_rows - 1);
    }
    
    card.y = y + margin + item_height/2 + row*(item_height + paddspace);
}

// Information for the con_resizer to keep the box the same size and in the same position on the screen
old_norm_x = scr_norm_x(x);
old_norm_y = scr_norm_y(y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if any buttons are highlighted

    var mx = mouse_x;
    var my = mouse_y;
    
//    if(point_in_rectangle
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_silver);
draw_rectangle(x, y, x+width, y+height, false);

draw_set_color(c_white);
draw_rectangle(x, y, x + width, y-denorm_len_y(nav_height_norm), false);
//draw_sprite(spr_gizmo, 0, x+width-sprite_get_width(spr_gizmo)/2, y+sprite_get_height(spr_gizmo)/2);

draw_set_color(c_gray);
draw_rectangle(x, y+height, x+width, y+height+denorm_len_y(nav_height_norm), false);

draw_set_color(c_ltgray);
for(i = 0; i &lt; array_length_1d(names); i++)
{
    draw_rectangle(x+denorm_len_x(locs_x[i]), y+denorm_len_y(locs_y[i]), x+denorm_len_x(locs_x[i]+widths[i]), y+denorm_len_y(locs_y[i]+heights[i]),false);
    draw_set_valign(fa_middle);
    draw_set_halign(fa_center);
    draw_set_color(c_red);
    draw_text(x+denorm_len_x(locs_x[i])+denorm_len_x(widths[i])/2, y+denorm_len_y(locs_y[i])+denorm_len_y(heights[i])/2,comp_text[i]);
}

/*
draw_set_color(c_ltgray);
draw_rectangle(x + margin, y + height + 5, x + margin + 15, y + height + 10, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Turn the page forward

curr_page = min(curr_page + 1, num_pages - 1);

scr_view_update();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Turn the page back

curr_page = max(0, curr_page - 1);

scr_view_update();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
