<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create a deck. Currently starts with cards in it already. &gt;obj_card create

list = ds_list_create();
gizmo = noone;
view = noone;
net_id = "";

color = 255;

with( instance_create(0, 0, obj_gizmo) ) {
    deck = other.id;
    other.gizmo = id;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destory the ds_maps contained in the ds_list, the ds_list itself, and the deck's gizmo.

for(i = 0; i &lt; ds_list_size(list); i++ ){
    ds_map_destroy(list[| i]);
}

ds_list_destroy(list);

with(gizmo) {
    instance_destroy();
}

with(view)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set sprite to top card

if( !ds_list_empty(list) ) {

    var topCard = ds_list_find_value(list, 0);
    
    sprite_index = topCard[? "sprite"];
    image_xscale = global.scale * topCard[? "scale_x"];
    image_yscale = global.scale * topCard[? "scale_y"];
    
    sprite_set_offset(sprite_index, topCard[? "offset_x"], topCard[? "offset_y"]);       
        
    if( topCard[? "flipped"] )
    {
        image_index = 1;
        
    }
    else
    {
        image_index = 0;
    }
}
else
{    // If it's empty and somehow not destroyed, destroy it and its gizmo.
    with(gizmo)
        instance_destroy();
    instance_destroy();    
}

if(color &lt; 255)
{
    //debug("c_white: " + string(c_white) + "; image_blend: " + string(image_blend));
    image_blend = make_color_rgb(255, 255, color);
    color = color + (255/(2*room_speed))
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
