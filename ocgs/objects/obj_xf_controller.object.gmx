<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create event


/**
* Config vars
* ===========
*/

// Trim white space off the source input when reading an xml string?
cfg_read_xml_trim_source = true;

// Trim white space off text, comment and cdata nodes when reading an xml string?
cfg_read_xml_trim_content = true;

// Ignore empty text, comment and cdata nodes when reading an xml string?
cfg_read_xml_discard_empty = true;

// Ignore comments when reading an xml string?
cfg_read_xml_discard_comment = true;

// Decode entities back to their original character when reading an xml string?
cfg_read_xml_entities_decode = true;

// Can give up to 10% increased speed at the cost of 100% more memory usage.
cfg_read_xml_double_buffer = false;

// Cast attribute values to real or bool if possible when reading an xml string?
cfg_read_xml_att_cast = true;

// Replace the characters &lt;,&gt;,'," with their entities as needed when writing an xml string?
cfg_write_xml_entities_encode = true;

// Replace white space in attribute names when writing an xml string?
cfg_write_xml_replace_attname_space = true;

// Attribute white space replacement string when writing an xml string.
cfg_write_xml_replace_attname_char = "_";

// Output tidy code in applicable write functions?
cfg_write_tidy = true;

// Enable message log?
cfg_log = debug_mode;

// Which messages to log (1 = errors, 2 = errors and notices, 3 = errors, notices and debug)
cfg_log_level = 2;

// Show messages as window popup?
cfg_log_pop_error  = false;
cfg_log_pop_notice = false;
cfg_log_pop_debug  = false;

// Show messages in console?
cfg_log_con_error  = true;
cfg_log_con_notice = true;
cfg_log_con_debug  = false;


/**
* Private vars
* ============
*/

// The last error logged
p_error = "";

// Callbacks
p_call_ev_create   = noone;
p_call_ev_destroy  = noone;
p_call_ev_copy     = noone;
p_call_ev_relocate = noone;
p_call_ev_delete   = noone;
p_call_ev_set      = noone;
p_call_ev_value    = noone;
p_call_ev_write    = noone;

// Event states
p_ev_create_on   = 1;
p_ev_destroy_on  = 1;
p_ev_copy_on     = 1;
p_ev_relocate_on = 1;
p_ev_delete_on   = 1;
p_ev_set_on      = 1;
p_ev_value_on    = 1;
p_ev_write_on    = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Room end event

if (!persistent) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
