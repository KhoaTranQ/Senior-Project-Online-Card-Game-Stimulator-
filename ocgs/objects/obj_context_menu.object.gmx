<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_menu</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change the look and feel

var params = x;

x = params[| 0];
y = params[| 1];
context = params[| 2];
async_context = noone;
view_id=-1;
type = noone;

if(context != noone)
    type = context.object_index
    
depth=-8;

if(type == obj_card)         // what we found was a card.
{
    add_dropdown_option(0, noone, "Turn Card (T)(R)", noone, false);
    add_dropdown_option(1, noone, "Flip Card (F)", noone, false);
    add_dropdown_option(2, noone, "Zoom (alt)", noone, false);
    add_dropdown_option(3, noone, "Convert to deck (C)", noone, false);
    add_dropdown_option(4, noone, "Delete (del)", noone, false);
}
else if (type == obj_deck)     // what we found was a deck.
{
    
    add_dropdown_option(0, noone, "Turn Card (T)(R)", noone, false);
    add_dropdown_option(1, noone, "Flip Stack (F)", noone, false);
    add_dropdown_option(2, noone, "Shuffle (S)", noone, false);
    add_dropdown_option(3, noone, "View...", noone, false);
    add_dropdown_option(4, noone, "Delete (del)", noone, false);
}   
else
{
    add_dropdown_option(0, noone, "Add deck", spr_arrow, false);
    add_dropdown_option(1, noone, "Change color", noone, false);
    add_dropdown_option(2, spr_dice, "Random Number", noone, false);
}


//font
font = fnt_popup;

//size
total_width = 300; 
item_padding = 10;       //space around each item
highlight_padding = 3;   //extra padding for highlight indicator
highlight_rad = 5;       //Radius for round rect highlight

//colors
bak_color = c_black;
border_color = c_black;
highlight_color = c_teal;
icon_color = c_ltgray;
separator_color = c_ltgray;
text_color = c_ltgray;

bak_alpha = .85;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Built in variables, do not change

num = array_length_1d(option_text);

x_offset = 0;
y_offset = 0;
selected = noone;

item_height = font_get_size(font)+item_padding*2;
icon_width = item_height-item_padding*2;

//calculate offsets to keep box on screen
total_height = item_height*num;

var left = scr_norm_x(view_xview[0]);
var right = scr_norm_x(view_xview[0] + view_wview[0]);
var top = scr_norm_y(view_yview[0]);
var bottom = scr_norm_y(view_yview[0] + view_hview[0]);

if(x &lt; left)
{
    x_offset = left-x+1;
}
else if(x + total_width &gt; right)
{
    debug("screen check");
    x_offset = right-(x+total_width)+1;
}

if(y &lt; top)
{
    y_offset = top-y+1;
}
else if(y + total_height &gt; bottom)
{
    y_offset = -total_height;
}

x1 = x+x_offset;
x2 = x+total_width+x_offset;
ty1 = y+y_offset;
ty2 = y+total_height+y_offset;
total_icon_size = (icon_width+item_padding*2);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Find Selected

if (!scr_menu_overlap(id)) {

    var mx = scr_norm_x(device_mouse_x(0));
    var my = scr_norm_y(device_mouse_y(0));
    
    if(point_in_rectangle(mx, my, x1,ty1,x2,ty2))
    {
        selected =  floor((my-ty1)/item_height);
    }
    else
    {
        selected = noone;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!scr_menu_overlap(id))
    event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Only allow one box

instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Remove if not clicked

if(selected == noone)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
if(async_load[? "status"])
{
    if(async_load[? "id"] == view_id)
    {
        new(obj_view, async_context, async_load[? "value"]);
        async_context = noone;
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Override me for each option
//var other.object = scr_find_clickable(mouse_x, mouse_y);
// Check to make sure we did find something.
if(type == obj_card)         // what we found was a card.
{
    switch(selected)
    {            
        case 0:
            // 'x2' is the right edge of this menu.
            // 'y+(item_height*selected)+y_offset+1' is the top of the selected option.
            // the two together are the top-right corner of the selected option.
            
            //var coords = scr_denorm_coord(x2+1, y+(item_height*selected)+y_offset+1);
            
            with( instance_create(x2+1,y+(item_height*selected)+y_offset+1,obj_turn_menu) )
            {
                // information the sub-menu will inherit.
                parent = other.id;
                context = other.context;
                type = other.type;  // not strictly necessary; could just find it again from context
                index = other.selected;
                
                // If the sub menu would go beyond the right edge of the screen, it will try to move left.
                // This will move it to the left of the super menu if that happens.
                if (x1 &lt; other.x2) {
                    x1 = other.x1 - total_width;
                    x2 = x1 + total_width;
                }
            }
            break;
            
        case 1:
            scr_flip_card(context);
            sync_flip(context);
            instance_destroy();
            break;
        case 2:
            new(obj_zoom, context);
            instance_destroy();
            break;
        case 3:    
            if( scr_zone_free(context) )
            {
                var obj_net_id = context.net_id;
                var deck = scr_card_to_deck(context);
                sync_card_to_deck(obj_net_id, deck);
                instance_destroy();
            }
            break;
        case 4:
            scr_delete(context);
            instance_destroy();
        default: break;
    }
}
else if (type == obj_deck)     // what we found was a deck.
{
    switch(selected)
    {
        case 0:            
            with( instance_create(x2+1,y+(item_height*selected)+y_offset+1,obj_turn_menu) )
            {
                parent = other.id;
                context = other.context;
                type = other.type;  
                index = other.selected;
                if (x1 &lt; other.x2) 
                {
                    x1 = other.x1 - total_width;
                    x2 = x1 + total_width;
                }
            }
            break;
        case 1:
            scr_flip_deck(context);
            sync_flip(context);
            break;

        case 2:
            var code = scr_rep_shuffle(context.list);
            sync_shuffle(context, code);
            break;
        case 3:
            if(context.view == noone)
            {
                new(async_view_manager, context, true);
            }
            instance_destroy();
            break;  
        case 4:
            scr_delete(context);
            instance_destroy();
            break;
            
        default:
            break;
    }
    
}
else
{
    switch(selected)
    {       
        case 0:
            with( instance_create(x2+1,y+(item_height*selected)+y_offset+1,obj_pick_deck) )
            {
                    parent = other.id;
                    type = other.type; 
                    context = other.context;
                    if (x1 &lt; other.x2) {
                        x1 = other.x1 - total_width;
                        x2 = x1 + total_width;
                    }
            }            
            break;
            
        case 1:
            instance_create(0,0, obj_bg_colorer);
            instance_destroy();
            break;
        case 2:        
            instance_create(0,0, obj_RNG);
            instance_destroy();
            break;
        default: break;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the box
draw_set_color(bak_color);
draw_set_alpha(bak_alpha);
draw_rectangle(x1,ty1,x2,ty2,false);
draw_set_alpha(1);
draw_set_color(border_color);
draw_rectangle(x1,ty1,x2,ty2,true);

draw_set_color(separator_color);
draw_line(x1+total_icon_size,ty1,x1+total_icon_size,ty2);

for(var i = 0; i &lt; num; i++)
{
    var y1 = y+(item_height*i)+y_offset+1;
    var y2 = y+(item_height*(i+1))+y_offset;
    
    
    var icon = icons[i];
    if(sprite_exists(icon))
    {
        draw_sprite_ext(icon,0,x1+total_icon_size/2,y1+total_icon_size/2,sprite_get_width(icon)/total_icon_size,sprite_get_height(icon)/total_icon_size,0,icon_color,image_alpha);
    }
    
    draw_set_color(separator_color);
    
    if(draw_separator[i])
    {
        draw_line(x1+total_icon_size,y1,x2,y1);
    }
    
    draw_set_font(-1);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_set_color(text_color);
    draw_text(x1+total_icon_size+item_padding, y1+item_padding, option_text[i]);
    
    var action_icon = action_icons[i];
    if(sprite_exists(action_icon))
    {
        draw_sprite_ext(action_icon,0,x2-total_icon_size/2,y1+total_icon_size/2,sprite_get_width(action_icon)/total_icon_size,sprite_get_height(action_icon)/total_icon_size,0,icon_color,image_alpha);
    }
    
    if(i == selected)
    {
        draw_set_color(highlight_color);
        draw_set_alpha(.05);
        draw_roundrect_ext(x1+highlight_padding,y1+highlight_padding,x2-highlight_padding,y2-highlight_padding,highlight_rad,highlight_rad,false);
        draw_set_alpha(.8);
        draw_roundrect_ext(x1+highlight_padding,y1+highlight_padding,x2-highlight_padding,y2-highlight_padding,highlight_rad,highlight_rad,true);
        draw_set_alpha(1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
