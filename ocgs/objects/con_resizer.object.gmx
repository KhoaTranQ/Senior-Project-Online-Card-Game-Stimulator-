<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>reset = false;

winHeight = 0;
winWidth = 0;

screenHeight = 0;
screenAR = 0;

handWidth = 0;
handAR = 0;

backAR = 0;
backWidth = 0;
backHeight = 0;

x_offset = 0;
y_offset = 0;

prev_wview0 = 0;
prev_hview0 = 0;

zm_amt = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

// Zoom in
if( mouse_wheel_up() )
{
    // Don't let hview get smaller than 200
    if( !(view_hview[0] - zm_amt &lt; 200) )
    {
        view_hview[0] = view_hview[0] - zm_amt;
        view_wview[0] = view_hview[0] * screenAR;
        view_yview[0] += (zm_amt / 2);
        view_xview[0] += (zm_amt*screenAR / 2);    
    }
    
    reset = true;
}

// Zoom out
if( mouse_wheel_down() )
{
    view_hview[0] += zm_amt;
    view_wview[0] = view_hview[0] * screenAR;
    
    view_yview[0] -= (zm_amt / 2);
    view_xview[0] -= (zm_amt*screenAR / 2)
    
    reset = true;
}

// Start pannig
if( mouse_check_button_pressed( mb_middle ) )
{
    x_offset = mouse_x;
    y_offset = mouse_y
    
    reset = true;
}

// Pan
if( mouse_check_button( mb_middle) )
{
    view_xview[0] = view_xview[0] + x_offset - mouse_x;
    view_yview[0] = view_yview[0] + y_offset - mouse_y;
    
    
    reset = true;
}

// Window resize
if( winHeight != window_get_height() || winWidth != window_get_width() ) {
    winHeight = window_get_height();
    winWidth = window_get_width();  
    
    screenHeight = winHeight - view_hport[1]; 
    screenAR = winWidth / screenHeight;
    
    handWidth = winWidth;
    handAR = winWidth / view_hport[1]
    
    // Resizing doesn't effect view height; only zooming can effect that.
    // Resizing doesn't effect view y; only panning and zooming can effect that.    
    prev_wview0 = view_wview[0];
    view_wview[0] = view_hview[0] * screenAR;
    view_hport[0] = screenHeight;
    view_wport[0] = winWidth;
    
    view_xview[0] -= ((view_wview[0] - prev_wview0)/2);  
    
    if( winHeight &gt; 0 &amp;&amp; winWidth &gt; 0)
    {
        surface_resize(application_surface, winWidth, winHeight);
        
    }
    reset = true;    
}

//Reset
if( reset = true ) {
    reset = false;
    
    // Move the hand so it's always just below view[0]
    view_yview[1] = view_yview[0] + view_hview[0];
    
    //The hand should span the wview, but again it needs to keep the same AR.
    // the hand's xview also always needs to start where the main area's xview starts.
    view_wview[1] = view_wview[0];
    view_hview[1] = view_wview[1] / handAR;
    view_yport[1] = winHeight - view_hport[1];
    view_wport[1] = handWidth;
    
    view_xview[1] = view_xview[0];
        
    if( background_exists(background_index[0]) )
    {    
        viewAR = view_wview[0] / view_hview[0];
        backAR = background_get_width(background_index[0]) / background_get_height(background_index[0]);
        
        
        if( viewAR &gt; backAR)
        // view is wider.
        {
            backWidth = view_wview[0];
            backHeight = backWidth / backAR;
            background_x[0] = view_xview[0];
            background_y[0] = view_yview[0]-((backHeight - view_hview[0]) / 2);
        }
        else
        {
            backHeight = view_hview[0];
            backWidth = backHeight * backAR;
            background_x[0] = view_xview[0]-((backWidth - view_wview[0]) / 2);
            background_y[0] = view_yview[0];;
        }
        
        background_xscale[0] = backWidth/background_get_width(background_index[0]);
        background_yscale[0] = backHeight/background_get_height(background_index[0]);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
